library(purrr)
## 1.2: IMPORTERER DATA
holdninger <- import("https://github.com/jespersvejgaard/PDS/raw/master/data/holdninger.rdata")
partivalg <- import("https://github.com/jespersvejgaard/PDS/raw/master/data/partivalg.rdata")
###########################################
## OPGAVE 2: PCA
###########################################
## 2.1: UNDERSØGER DATA
map(holdninger, mean)  # variablenes gns. er ca. det samme
map(holdninger, sd)  # variablenes standard deviation er ogs ca. det samme => skalering ikke strengt nødvendigt, men skader ikke og er fint for at sikre maksimal sammenlignelighed
install.packages(rio)
install.packages("rio")
install.packages("dplyr")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("purrr")
# 1.2: IMPORTERER DATA
holdninger <- import("https://github.com/jespersvejgaard/PDS/raw/master/data/holdninger.rdata")
partivalg <- import("https://github.com/jespersvejgaard/PDS/raw/master/data/partivalg.rdata")
?import
install.packages("data.table")
holdninger <- import("https://github.com/jespersvejgaard/PDS/raw/master/data/holdninger.rdata")
holdninger <- fread("https://github.com/jespersvejgaard/PDS/raw/master/data/holdninger.rdata")
.1: LOADER PAKKER (skal installeres, hvis de ikke allerede er det)
library(rio)
library(dplyr)
library(ggplot2)
library(purrr)
library(data.table)
holdninger <- fread("https://github.com/jespersvejgaard/PDS/raw/master/data/holdninger.rdata")
partivalg <- import("https://github.com/jespersvejgaard/PDS/raw/master/data/partivalg.rdata")
partivalg <- fread("https://github.com/jespersvejgaard/PDS/raw/master/data/partivalg.rdata")
holdninger <- load("https://github.com/jespersvejgaard/PDS/raw/master/data/holdninger.rdata")
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
holdninger <- import("https://github.com/jespersvejgaard/PDS/raw/master/data/holdninger.rdata")
library(tidyverse)
holdninger <- import("https://github.com/jespersvejgaard/PDS/raw/master/data/holdninger.rdata")
holdninger <- read_table("https://github.com/jespersvejgaard/PDS/raw/master/data/holdninger.rdata")
View(holdninger)
holdninger <- fread("https://github.com/jespersvejgaard/PDS/raw/master/data/holdninger.rdata")
partivalg <- fread("https://github.com/jespersvejgaard/PDS/raw/master/data/partivalg.rdata")
partivalg <- import("https://github.com/jespersvejgaard/PDS/raw/master/data/partivalg.rdata")
holdninger <- read.table("https://github.com/jespersvejgaard/PDS/raw/master/data/holdninger.rdata")
load("C:/Users/ftp/Downloads/partivalg.rdata")
load("C:/Users/ftp/Downloads/holdninger.rdata")
rm(holdninger, partivalg, x)
load("C:/Users/ftp/Downloads/holdninger.rdata")
load("C:/Users/ftp/Downloads/partivalg.rdata")
abc <-  x
load("C:/Users/ftp/Downloads/holdninger.rdata")
holdninger <-  x
partivalg <-  abc
rm(abc, x)
map(holdninger, mean)  # variablenes gns. er ca. det samme
map(holdninger, sd)  # variablenes standard deviation er ogs ca. det samme => skalering ikke strengt nødvendigt, men skader ikke og er fint for at sikre maksimal sammenlignelighed
holdninger_pca <- prcomp(holdninger, center = TRUE, scale = TRUE)  # vi centrerer og skalerer
View(holdninger_pca)
names(holdninger_pca)
holdninger_pca$sdev       # SD for hver PC
biplot(holdninger_pca, scale = 0) # scale = 0 sørger for at pilene er skaleret til at vise loadings
(holdninger_pca_var <- holdninger_pca$sdev^2)  # variansen for hver PC
## 2.4: VARIANCE EXPLAINED: BEREGNING AF VARIANS OG VARIANS EXPLAINED
(holdninger_pca_var <- holdninger_pca$sdev^2)  # variansen for hver PC
(holdninger_pca_PVE <- holdninger_pca$sdev^2/sum(holdninger_pca$sdev^2))  # pve, percentage variance explained for hver PC
(holdninger_pca_CVE <- cumsum(holdninger_pca$sdev^2/sum(holdninger_pca$sdev^2)))  # kumulativ variance explained
summary(holdninger_pca)  # beregner også PVE og CVE, det er dog sværere at selecte elementerne her
plot(holdninger_pca_PVE, xlab="Principal Component", ylab="Proportion of Variance Explained ", ylim = c(0,1),type = "b")
plot(holdninger_pca_CVE, xlab="Principal Component ", ylab=" Cumulative Proportion of Variance Explained ", ylim = c(0,1), type = "b")
## 2.5: LAVER DATAFRAME DER KOBLER PCA SCORES OG PARTIVALG
holdninger_df <- data.frame(holdninger_pca$x,
partivalg)
## 2.6: SAMMENLIGNING AF PCA-SCORES OG FAKTISK PARTIVALG
ggplot(holdninger_df, aes(x = PC1, y = PC2)) +
geom_point(aes(color = partivalg), alpha = 0.5) +
facet_wrap(~ partivalg) +
ylim(-4, 4) +
xlim(-5, 5)
## 2.6: SAMMENLIGNING AF PCA SCORES OG OM VALGTE PARTI ER RØD/BLÅ BLOK
ggplot(holdninger_df, aes(x = PC1, y = PC2)) +
geom_point(aes(color = partivalg_blok), alpha = 0.5) +
ylim(-4, 4) +
xlim(-5, 5)
valg2015 <- import("https://github.com/jespersvejgaard/PDS/raw/master/data/valg2015.rdata")
?import
??import
valg2015 <- rio::import("https://github.com/jespersvejgaard/PDS/raw/master/data/valg2015.rdata")
# LOADER PAKKER
library(rio)
library(dplyr)
library(ggplot2)
library(pROC)
## INDLÆSER DATA
valg2015 <- rio::import("https://github.com/jespersvejgaard/PDS/raw/master/data/valg2015.rdata")
# TJEKKER DATA UD (inkl. kodebog)
glimpse(valg2015)
#######################################################################
## LAVER TRÆNINGS- OG TESTSÆT
set.seed(42)
index <- sample(nrow(valg2015), nrow(valg2015)*0.8)
valg2015_train <- valg2015[index, ]
valg2015_test <- valg2015[-index, ]
## TRÆNER MODELLER
m_ols <- lm(partivalg ~ ., data = valg2015_train)  # svarer til lm() når vi ikke specificerer argumentet family
m_logit <- glm(partivalg ~ ., data = valg2015_train, family = "binomial")
## TJEKKER RESULTATER
summary(m_ols)  # R^2 er ca. 0.09 = vi indfanger kun begrænset del af variationen i Y
summary(m_logit)  # 1 - deviance/null.deviance er i cirka samme størrelsesorden, hvormed pseudo R^2 er lav
## PRÆDIKTERER PARTIVALG
valg2015_test$pred_ols <- predict(m_ols, newdata = valg2015_test)
valg2015_test$pred_logit <- predict(m_logit, newdata = valg2015_test, type = "response")
## PLOTTER PRÆDIKTEREDE PARTIVAL MOD FAKTISKE PARTIVALG
ggplot(valg2015_test, aes(pred_ols, partivalg)) + geom_point()  # vi er ikke gode til at adskille y pba. y_hat - varlser lav performance
ggplot(valg2015_test, aes(pred_logit, partivalg)) + geom_point()  # samme
## TRANSFORMERER VORES PRÆDIKTEREDE OUTCOME FRA KONTINUERT TIL KATEGORISK VARIABEL
valg2015_test <- valg2015_test %>% mutate(pred_ols_kat = ifelse(pred_ols > mean(pred_ols, na.rm = TRUE), 1, 0))
valg2015_test <- valg2015_test %>% mutate(pred_logit_kat = ifelse(pred_logit > mean(pred_logit, na.rm = TRUE), 1, 0))
## CONFUSION-MATRICER (første argument vises i rækkerne, andet argument vises i kolonnerne)
table(valg2015_test$partivalg, valg2015_test$pred_ols_kat)
dsn <- "http://geoservice.plansystem.dk/wfs?service=WFS&request=GetFeature&version=1.0.0&typeNames=theme_pdk_lokalplan_vedtaget_v&CQL_FILTER=komnr=101"
ogrListLayers(dsn)
install.packages("rgdal")
library(rgdal)
dsn <- "http://geoservice.plansystem.dk/wfs?service=WFS&request=GetFeature&version=1.0.0&typeNames=theme_pdk_lokalplan_vedtaget_v&CQL_FILTER=komnr=101"
ogrListLayers(dsn)
dsn <- "http://geoservice.plansystem.dk/wfs?service=WFS&request=GetFeature&version=1.0.0&typeNames=theme_pdk_lokalplan_vedtaget_v&CQL_FILTER=komnr=101"
ogrListLayers(dsn)
test <- readOGR(dsn, "LP.shp", "theme_pdk_lokalplan_vedtaget_v")
dsn <- "http://geoservice.plansystem.dk/wfs?service=WFS&request=GetFeature&version=1.0.0&typeNames=theme_pdk_lokalplan_vedtaget_v&CQL_FILTER=komnr=101"
ogrListLayers(dsn)
readOGR(dsn, "theme_pdk_lokalplan_vedtaget_v")
ogr2ogr(dsn, "LP", "theme_pdk_lokalplan_vedtaget_v")
ogr2ogr(dsn, "LP.shp", "theme_pdk_lokalplan_vedtaget_v")
install.packages("ogr2ogr")
library(ogr2ogr)
install.packages("ogr2ogr", force)
})
install.packages("gdalUtils")
library(gdalUtils)
ogr2ogr(dsn, "LP.shp", "theme_pdk_lokalplan_vedtaget_v")
sic <- readOGR("sic.shp", "sic", stringsAsFactors=FALSE)
sic <- readOGR("sic.shp", "theme_pdk_lokalplan_vedtaget_v", stringsAsFactors=FALSE)
sic <- readOGR("LP.shp")
View(sic)
?read OGR
?readOGR
table(valg2015_test$partivalg, valg2015_test$pred_logit_kat)  # umiddelbart ser logit-modellen ud til at levere marginalt bedre prædiktioner
## CONFUSION-MATRICER (første argument vises i rækkerne, andet argument vises i kolonnerne)
table(valg2015_test$partivalg, valg2015_test$pred_ols_kat)
table(valg2015_test$partivalg, valg2015_test$pred_logit_kat)  # umiddelbart ser logit-modellen ud til at levere marginalt bedre prædiktioner
## BEREGNER ACCURACY
mean(valg2015_test$partivalg == valg2015_test$pred_ols_kat, na.rm = T)  # 0.587
mean(valg2015_test$partivalg == valg2015_test$pred_logit_kat, na.rm = T)  # 0.615
## SER FORDELINGEN PÅ OUTCOME-VARIABLEN
table(valg2015_test$partivalg)  # 0 = 225 (62,8 %) ; 1 = 133 (37,2 %)
## BEREGNER ROC-KURVER
ROC_ols <- roc(valg2015_test$partivalg, valg2015_test$pred_ols)
library(pROC)
install.packages("pROC")
library(pROC)
## BEREGNER ROC-KURVER
ROC_ols <- roc(valg2015_test$partivalg, valg2015_test$pred_ols)
ROC_logit <- roc(valg2015_test$partivalg, valg2015_test$pred_logit)
plot(ROC_ols)
plot(ROC_logit)  # ved øjemål ser de ganske ens ud
auc(ROC_ols)  # 0.6294
auc(ROC_logit)  # 0.6295 - forskellen er ubetydelig
install.packages("RPostgresSQL")
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname="Erst-intern", host="S-gispredbp01.es.lan", port=5432 , user="erst_intern", password="Husk-mej!")
con <- dbConnect(drv, dbname="erst-intern", host="s-gispredbp01.es.lan", port=5432 , user="erst_intern", password="Husk-mej!")
con <- dbConnect(drv, dbname="erst-intern", host="s-gispredb-p01.es.lan", port=5432 , user="erst_intern", password="Husk-mej!")
con <- dbConnect(drv, dbname="Erst-intern", host="s-gispredb-p01.es.lan", port=5432 , user="erst_intern", password="Husk-mej!")
con <- dbConnect(drv, dbname="erst_intern", host="s-gispredb-p01.es.lan", port=5432 , user="erst_intern", password="Husk-mej!")
dbname <- dbGetQuery(con, "SELECT table_catalog FROM information_schema.tables LIMIT 1") View(dbname)
dbname <- dbGetQuery(con, "SELECT table_catalog FROM information_schema.tables LIMIT 1") View(erst_intern)
sql = paste("SELECT table_schema, table_name FROM information_schema.tables WHERE table_catalog = '",
dbname, "' AND table_schema NOT IN ('pg_catalog', 'files', 'information_schema') ORDER BY table_schema, table_name",
sep="")
dbname <- dbGetQuery(con, "SELECT table_catalog FROM information_schema.tables LIMIT 1")
View(dbname)
sql = paste("SELECT table_schema, table_name FROM information_schema.tables WHERE table_catalog = '",
dbname, "' AND table_schema NOT IN ('pg_catalog', 'files', 'information_schema') ORDER BY table_schema, table_name",
sep="")
dbTables <- dbGetQuery(con, sql)
View(dbTables)
myTable <- dbGetQuery(con, "SELECT id, item, description FROM baseline.lavbundsareal_dk_17_06_15")
myTable <- dbGetQuery(con, "SELECT * FROM baseline.lavbundsareal_dk_17_06_15")
myTable <- dbGetQuery(con, "SELECT * FROM Baseline.lavbundsareal_dk_17_06_15")
myTable <- dbGetQuery(con, "SELECT * FROM "Baseline".lavbundsareal_dk_17_06_15")
myTable <- dbGetQuery(con, "SELECT objekt_id FROM Baseline.lavbundsareal_dk_17_06_15")
myTable <- dbGetQuery(con, "SELECT objekt_id FROM baseline.lavbundsareal_dk_17_06_15")
myTable <- dbGetQuery(con, "SELECT objekt_id FROM baseline.lavbundsareal_dk_17_06_15;")
schemaName = "Baseline" tableName = "baseline.lavbundsareal_dk_17_06_15"
schemaName = "Baseline"
tableName = "lavbundsareal_dk_17_06_15"
myTable <- dbGetQuery(con, "SELECT iption FROM sample_schema.sample_table")
myTable <- dbGetQuery(con, "SELECT * FROM sample_schema.sample_table")
sql = paste("SELECT column_name, data_type FROM information_schema.columns WHERE table_schema = '",schemaName,"' AND table_name = '",tableName,"'", sep="")
tableColumns <- dbGetQuery(con, sql)
View(tableColumns)
sql3 = paste("SELECT * FROM information_schema.columns WHERE table_schema = '",schemaName,"' AND table_name = '",tableName,"'", sep="")
sql1 = paste("SELECT table_schema, table_name FROM information_schema.tables WHERE table_catalog = '",
dbname, "' AND table_schema NOT IN ('pg_catalog', 'files', 'information_schema') ORDER BY table_schema, table_name",
sep="")
sql2 = paste("SELECT column_name, data_type FROM information_schema.columns WHERE table_schema = '",schemaName,"' AND table_name = '",tableName,"'", sep="")
myTable <- dbGetQuery(con, sql3)
View(myTable)
sql3 = paste("SELECT * FROM information_schema.columns WHERE table_schema = '",schemaName,"' AND table_name = '",tableName,"'", sep="") %>%
as.data.frame()
library(dplyr)
library(tidyverse)
myTable <- dbGetQuery(con, sql3) %>%
as.data.frame()
sql4 = "SELECT * FROM Baseline.lavbundsareal_dk_17_06_15"
myTable <- dbGetQuery(con, sql4)
myTable <- dbGetQuery(con, sql3)
?dbReadTable
res <- dbSendQuery(con, "SELECT * from Baseline.lavbundsareal_dk_17_06_15")
res <- dbSendQuery(con, "SELECT * from lavbundsareal_dk_17_06_15")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname="erst_intern", host="s-gispredb-p01.es.lan", port=5432 , user="erst_intern", password="Husk-mej!")
res <- dbSendQuery(con, "SELECT * from lavbundsareal_dk_17_06_15")
res <- dbSendQuery(con, "SELECT * from Baseline.lavbundsareal_dk_17_06_15")
table = paste0(schemaName,tableName)
table = paste(schemaName,tableName)
schemaName = "Baseline."
tableName = "lavbundsareal_dk_17_06_15"
table = paste0(schemaName,tableName)
res <- dbSendQuery(con, "SELECT * from Baseline.lavbundsareal_dk_17_06_15")
res <- dbSendQuery(con, "SELECT * from baseline.lavbundsareal_dk_17_06_15")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname="erst_intern", host="s-gispredb-p01.es.lan", port=5432 , user="erst_intern", password="Husk-mej!")
sql1 = paste("SELECT table_schema, table_name FROM information_schema.tables WHERE table_catalog = '",
dbname, "' AND table_schema NOT IN ('pg_catalog', 'files', 'information_schema') ORDER BY table_schema, table_name",
sep="")
dbTables <- dbGetQuery(con, sql1)
View(dbTables)
setwd("C:/Users/ftp/OneDrive - Erhvervsstyrelsen/Github/Ejendomsvurdering-og-plandata/Ejendomsvurdering-og-plandata/")
load("data.Rda")
set.seed(42)
load("data.Rds")
load("data.Rd")
Packages <- c("sf",               "RCurl",
"rwfs",              "data.table",
"devtools",              "XML",
"gdalUtils",              "rgdal",
"tmap",              "sp",
"raster",              "dplyr",
"rvest",              "stringr",
"ggplot2",              "tidyr",
"viridis",              "broom",
"maptools",              "caret",
"dplyr",              "plyr",
"scales",              "rgdal",
"raster",               "dplyr",
"geosphere",               "tmap",
"tmaptools",               "rgeos",
"randomForest",              "ranger",
"xgboost",              "ggmap",
"pROC",              "geosphere",
"maptools",              "rgeos",
"ggmap",                "readr")
lapply(Packages, library, character.only = TRUE)
setwd("C:/Users/ftp/OneDrive - Erhvervsstyrelsen/Github/Ejendomsvurdering-og-plandata/Ejendomsvurdering-og-plandata/")
load("data.Rd")
set.seed(42)
load("Århus.Rda")
load("data.Rda")
add <- readr::read_csv("http://dawa.aws.dk/adresser?format=csv&kommunekode=0751")
add2 <- add %>%
select('wgs84koordinat_bredde', 'wgs84koordinat_længde', 'etrs89koordinat_øst','etrs89koordinat_nord') %>%
dplyr::distinct(wgs84koordinat_bredde, wgs84koordinat_længde, .keep_all=TRUE)
rm(add)
# med ETRS89-coor i add2 datasættet kan det nu tilfÅ¸res Århus-boligsalg datasættet
BoligSalg <- Århus %>%
left_join(add2, by =  c('lat'='wgs84koordinat_bredde', 'lon'='wgs84koordinat_længde'))
write.table(BoligSalg, file = "Boligsalg.csv", sep=",")
class(BoligSalg)
rm(add2)
#Oprydning 1
fields <-  c("buysum", "m2", "date", "n_rooms", "build_year",  "height", "lat", "lon", "postnr", "floor", "etrs89koordinat_øst", "etrs89koordinat_nord")
BoligSalg <- BoligSalg[fields]
#####################################################
#                                                   #
#      Download og join af Lokalplan i Århus        #
#                                                   #
#####################################################
#OBS en del parametre har jeg defineret i url'en for at forsimple OGR hentningen.
ÅRHUS_DSN <-"http://geoserver.plandata.dk/geoserver/wfs?servicename=WFS&request=GetFeature&Version=1.0.0&typeNames=theme_pdk_lokalplan_vedtaget_v&CQL_FILTER=komnr=751"
ogrinfo(ÅRHUS_DSN, so=TRUE) # finder hvilke temaer WFS'en indeholde - kun 1 grundet URL specifikantion
ogr2ogr(ÅRHUS_DSN, "lokalplan_ÅRHUS.shp", "theme_pdk_lokalplan_vedtaget_v")  # hentning af data fra WFS
# Før jeg kan joine bliver jeg nÅ¸dt til at fjerne observationer, hvor at ETRS joined indholder NA
# Går fra 16320 obs til 15600 obs
#BoligSalg <- tidyr::drop_na(BoligSalg, etrs89koordinat_øst, etrs89koordinat_nord)
BoligSalg <- BoligSalg[!is.na(BoligSalg$etrs89koordinat_øst),]
BoligSalg <- BoligSalg[!is.na(BoligSalg$etrs89koordinat_nord),]
#Derefter tildeles Boligsalg observationerne indholdet fra LP såfremt at de ligger inden for en lokalplan
sf::read_sf("lokalplan_ÅRHUS.shp", crs = 25832) %>%
sf::st_join( x =
sf::st_as_sf(BoligSalg, coords = c("etrs89koordinat_øst", "etrs89koordinat_nord"),
crs = 25832), join = st_within, left = TRUE) %>%
sf::write_sf("bolig3.shp") #OBS skriver lokalfil
BoligSalg <- sf::read_sf("bolig3.shp", crs = 25832)
#
#   Der er et problem med, at der nogle steder optræder mere end én lokalplan.Det betyder at vi får flere observationer end der er i det oprindelige datasæt.
#
#
#her omdanner jeg informationerne til en dikotom variable.
BoligSalg$Lokalplan <- ifelse(BoligSalg$planid>0, 1, 0)
BoligSalg$Lokalplan  <- BoligSalg$Lokalplan %>% replace_na(0)
#BaseR.Replace udkonkurerer nedenstående ifelse, men ejg vil stadig gerne finde ud af hvorfor den ikke virker.
baseR.replace      <- function(x) { replace(x, is.na(x), 0) }
BoligSalg$anvgen <- baseR.replace(BoligSalg$anvgen)
#Oplysninger om anvendelse
#Kristian
# BoligSalg$LP_ANV <- 0
# if(BoligSalg$anvgen == 11){
#   BoligSalg$LP_ANV <- 1;
# } else if(BoligSalg$anvgen = 21) {
#   BoligSalg$LP_ANV <- 2;
# } else if(BoligSalg$anvgen = 31) {
#   BoligSalg$LP_ANV <- 3;
# } else if(BoligSalg$anvgen = 41) {
#   BoligSalg$LP_ANV <- 4;
# } else if(BoligSalg$anvgen = 51) {
#   BoligSalg$LP_ANV <- 5;
# } else if(BoligSalg$anvgen = 61) {
#   BoligSalg$LP_ANV <- 6;
# } else if(BoligSalg$anvgen = 71) {
#   BoligSalg$LP_ANV <- 7;
# } else if(BoligSalg$anvgen = 81) {
#   BoligSalg$LP_ANV <- 8;
# } else {
#   BoligSalg$LP_ANV <- 0;
# }
#
# x <-  12
# if(x < 11){
#   print("HEJ") ;
# } else if(x == 5) {
#   print("HEJHEJ");
# } else {
#   print("Farvel");
# }
fields <-  c("buysum", "m2", "date", "n_rooms", "build_year",  "height", "lat", "lon", "postnr", "floor",  "Lokalplan", "anvgen")
BoligSalg <- BoligSalg[fields]
#Da der i visse områder er 2 lokalplaner, er der blevet oprettet en række dubletter.
#Overvej om disse kan fjernes med en distinct() funktionen senere, når der er ryddet ud i data
#####################################################
#                                                   #
#      Afstandsanalyse til rekreative områder       #
#                                                   #
#####################################################
#Download af data
DSN_Kommuneplan_Ramme_751 <- "http://geoserver.plandata.dk/geoserver/wfs?servicename=WFS&request=GetFeature&Version=1.0.0&typeNames=theme_pdk_kommuneplanramme_vedtaget_v&CQL_FILTER=komnr=751"
ogrinfo(DSN_Kommuneplan_Ramme_751, so=TRUE)
ogr2ogr(DSN_Kommuneplan_Ramme_751, "Kommuneplanramme.shp", "theme_pdk_kommuneplanramme_vedtaget_v")
Rekreativeområder <- sf::read_sf("Kommuneplanramme.shp", crs = 25832)  %>%
filter(anvgen == 51) #JF datamodellen
#Afstand fra boligpunkt til nÅ¦rmeste rekreative område
BoligSalg$afstandR <- st_distance(BoligSalg,Rekreativeområder)[,1]
#####################################################
#                                                   #
#            Opysninger om bevaringsværdi           #
#                                                   #
#####################################################
#definerer tema og komkode i url for at reducere downloadet datamÅ¦ngde
slot <-  "http://www.kulturarv.dk/geoserver/wfs?service=WFS&version=1.0.0&request=GetCapabilities"
ogrinfo(slot, so=TRUE) # finder hvilke temaer WFS'en indeholde - kun 1 grundet URL specifikantion
ogr2ogr(slot, "Bevaringssag.shp", "fbb:view_bygning_bevaringssag")
Bevaringssag <- sf::read_sf("Bevaringssag.shp", crs = 25832)  %>%
filter(kommune == "Århus")
#spatialjoin --> omtrent 4000 boliger for en bevaringssag tilknyttet
BoligSalg <- st_join(BoligSalg, Bevaringssag, join = st_equals, left = TRUE)
# omdanner oplysningerne til en dikotom variable
BoligSalg$Bevaringssag <- ifelse(BoligSalg$bygningsid>0, 1, 0)
BoligSalg$Bevaringssag  <- BoligSalg$Bevaringssag %>% replace_na(0)
fields <-  c("buysum", "m2", "date", "n_rooms", "build_year",  "height", "lat", "lon", "postnr", "floor",  "Lokalplan", "anvgen", "afstandR", "Bevaringssag")
BoligSalg <- BoligSalg[fields]
#####################################################
#                                                   #
#                Lokalplandelområder                #
#                                                   #
#####################################################
#OBS en del parametre har jeg defineret i url'en for at forsimple OGR hentningen.
ÅRHUS_DSN <-"http://geoserver.plandata.dk/geoserver/wfs?servicename=WFS&request=GetFeature&Version=1.0.0&typeNames=theme_pdk_lokalplandelomraade_vedtaget_v&CQL_FILTER=komnr=751"
ogrinfo(ÅRHUS_DSN, so=TRUE) # finder hvilke temaer WFS'en indeholde - kun 1 grundet URL specifikantion
ogr2ogr(ÅRHUS_DSN, "lokalplan_del_ÅRHUS.shp", "theme_pdk_lokalplandelomraade_vedtaget_v")  # hentning af data fra WFS
#Derefter tildeles Boligsalg observationerne indholdet fra LP såfremt at de ligger inden for en lokalplan
sf::read_sf("lokalplan_del_ÅRHUS.shp", crs = 25832) %>%
sf::st_join( x =
sf::st_as_sf(BoligSalg, coords = c("etrs89koordinat_øst", "etrs89koordinat_nord"),
crs = 25832), join = st_within, left = TRUE) %>%
sf::write_sf("bolig4.shp") #OBS skriver lokalfil
BoligSalg <- sf::read_sf("bolig4.shp", crs = 25832)
BoligSalg$DelLokalplan <- ifelse(BoligSalg$planid>0, 1, 0)
BoligSalg$DelLokalplan  <- BoligSalg$planid %>% replace_na(0)
fields <-  c("buysum", "m2", "date", "n_rooms", "buld_yr",  "height", "lat", "lon", "postnr", "floor",  "Loklpln", "anvgn_x", "afstndR", "Bvrngss","DelLokalplan")
BoligSalg <- BoligSalg[fields]
save(BoligSalg, file="data.Rda")
rm(Bevaringssag, Bolig_fra_CSV, Bolig_med_sag, BoligmedLP, BoligSalg, Rekreativeomrøder, Århus,slot, DSN_Kommuneplan_Ramme_751, ÅRHUS_DSN )
setwd("C:/Users/ftp/OneDrive - Erhvervsstyrelsen/Github/Ejendomsvurdering-og-plandata/Ejendomsvurdering-og-plandata/")
load("data.Rda")
load("data.Rda")
set.seed(42)
rm("BoligSalg")
View(Rekreativeområder)
rm(Bevaringssag, Bolig_fra_CSV, Bolig_med_sag, BoligmedLP, BoligSalg, Rekreativeområder, Århus,slot, DSN_Kommuneplan_Ramme_751, ÅRHUS_DSN )
View(Århus)
rm("Århus")
load("data.Rda")
map <- tm_shape(BoligSalg) + tm_polygons("green", alpha=0.1) +
tm_shape(BoligSalg) + tm_dots(size=0.01, "red")
# Take a look at the map
map
map <- tm_shape(Rekreativeområder) + tm_polygons("green", alpha=0.1) +
tm_shape(BoligSalg) + tm_dots(size=0.01, "red")
# Take a look at the map
map
map <-   tm_shape(BoligSalg) + tm_dots(size=0.01, "red")
# Take a look at the map
map
png(filename="box1.png")
boxplot(Data_fin$BoligSalg/1000000, ylab = "Købssum (millioner)")
dev.off()
png(filename="box1.png")
boxplot(BoligSalg$buysum/1000000, ylab = "Købssum (millioner)")
dev.off()
formular <- buysum ~ m2 + date +n_rooms + buld_yr + height
formular2 <- buysum, m2, date, n_rooms, buld_yr,  height, postnr, floor,  Loklpln, anvgen, afstndR, Bvrngss,DelLokalplan
formular2 <- buysum ~ m2, date, n_rooms, buld_yr,  height, postnr, floor,  Loklpln, anvgen, afstndR, Bvrngss,DelLokalplan
formular <- buysum ~ m2 + date +n_rooms + buld_yr + height + postnr + floor
formular2 <- buysum ~ m2 + date + n_rooms + buld_yr +  height + postnr + floor +  Loklpln + anvgen + afstndR + Bvrngss + DelLokalplan
Index <-  sample(nrow(BoligSalg), nrow(BoligSalg)*0.75)
Bolig_train <- BoligSalg[Index, ]
Bolig_test <-  BoligSalg[-Index, ]
lm <-  lm(formular, data = Bolig_train)
Boligresult <- BoligSalg
Lineær model
lm <-  lm(formular, data = Bolig_train)
summary(lm)
Boligresult$P_lin1 = predict(lm, newdata = Bolig_test)
Boligresult$RES_lin1 = Boligresult$buysum - Boligresult$P_lin1
Boligresult$P_lin1 = predict(lm, newdata = Bolig_test)
Boligtest$P_lin1 = predict(lm, newdata = Bolig_test)
Bolig_test$P_lin1 = predict(lm, newdata = Bolig_test)
Bolig_test$RES_lin1 = Bolig_test$buysum - Bolig_test$P_lin1
mean(Boligresult$RES_lin1)
rmse(Bolig_test$RES_lin1)
sd(Bolig_test$RES_lin1)
mean(Bolig_test$RES_lin1)
rmse <- function(error)
{
sqrt(mean(error^2))
}
rmse(Bolig_test$RES_lin1)
BoligSalg_t <- BoligSalg[complete.cases(BoligSalg), ]
BoligSalg_t <- BoligSalg[complete.cases(), ]
BoligSalg_t <- BoligSalg[complete.cases(BoligSalg_t), ]
BoligSalg_t <- BoligSalg[complete.cases(BoligSalg), ]
BoligSalg_t <- complete.cases(BoligSalg)
BoiligSalg_tna.omit(BoligSalg)
BoiligSalg_t <- na.omit(BoligSalg)
BoiligSalg <- na.omit(BoligSalg)
Index <-  sample(nrow(BoligSalg), nrow(BoligSalg)*0.75)
Bolig_train <- BoligSalg[Index, ]
Bolig_test <-  BoligSalg[-Index, ]
formular <- buysum ~ m2 + date +n_rooms + buld_yr + height + postnr + floor
formular2 <- buysum ~ m2 + date + n_rooms + buld_yr +  height + postnr + floor +  Loklpln + anvgen + afstndR + Bvrngss + DelLokalplan
Boligresult <- BoligSalg
lm <-  lm(formular, data = Bolig_train)
summary(lm)
Bolig_test$P_lin1 = predict(lm, newdata = Bolig_test)
Bolig_test$RES_lin1 = Bolig_test$buysum - Bolig_test$P_lin1
rmse(Bolig_test$RES_lin1)
sd(Bolig_test$RES_lin1)
mean(Bolig_test$RES_lin1)
View(BoiligSalg)
?mean
mean(Bolig_test$RES_lin1, na.rm=T)
sd(Bolig_test$RES_lin1, na.rm=T)
lm <-  lm(formular, data = Bolig_train)
Bolig_train <- BoligSalg[Index, ]
Bolig_test <-  BoligSalg[-Index, ]
lm <-  lm(formular, data = Bolig_train)
lm <-  lm(formular, data = Bolig_train)
summary(lm)
Bolig_test$P_lin1 = predict(lm, newdata = Bolig_test)
Bolig_test$RES_lin1 = Bolig_test$buysum - Bolig_test$P_lin1
rmse(Bolig_test$RES_lin1)
load("data.Rda") #named BoligSalg
rm.na(BoligSalg)
na.omit(BoligSalg)
Index <-  sample(nrow(BoligSalg), nrow(BoligSalg)*0.75)
Bolig_train <- BoligSalg[Index, ]
Bolig_test <-  BoligSalg[-Index, ]
formular <- buysum ~ m2 + date +n_rooms + buld_yr + height + postnr + floor
formular2 <- buysum ~ m2 + date + n_rooms + buld_yr +  height + postnr + floor +  Loklpln + anvgen + afstndR + Bvrngss + DelLokalplan
lm <-  lm(formular, data = Bolig_train)
summary(lm)
Bolig_test$P_lin1 = predict(lm, newdata = Bolig_test)
Bolig_test$RES_lin1 = Bolig_test$buysum - Bolig_test$P_lin1
rmse(Bolig_test$RES_lin1)
sd(Bolig_test$RES_lin1, na.rm=T)
mean(Bolig_test$RES_lin1, na.rm=T)
sd(Bolig_test$RES_lin1)
Index <-  sample(nrow(BoligSalg), nrow(BoligSalg)*0.75)
Bolig_train <- BoligSalg[Index, ]
